@page "/example10"
@using System.ComponentModel.DataAnnotations;

<h3>Customized form validator</h3>

<div class="code-box-description">
    <p>Setting a custom validator using the Form Validator property or the <code>&lt;Validator&gt;</code> element overrides the built-in validator. When validation is not required, it can be set to NULL to improve performance.</p>
    <p>Note: When using the <code>&lt;Validator&gt;</code> element to set the validator, you need to wrap the other components within the Form with <code>&lt;ChildContent&gt;</code>.</p>
    <p>For custom validator development, see document: <a href="https://docs.microsoft.com/en-US/aspnet/core/blazor/forms-validation?view=aspnetcore-5.0&amp;WT.mc_id=DT-MVP-5003987#validator-components">ASP.NET Core Blazor forms and validation - Validator components</a></p>
</div>

<Form Model="@model1"
      LabelColSpan="8"
      WrapperColSpan="16"
      Validator="null">
    <FormItem Label="No Validator">
        <AntDesign.InputNumber @bind-Value="@context.Number"/>
    </FormItem>
</Form>
<Form Model="@model2"
      LabelColSpan="8"
      WrapperColSpan="16">
    <Validator>
        <CustomValidator/>
    </Validator>
    <ChildContent>
        <FormItem Label="CustomValidator">
            <AntDesign.InputNumber @bind-Value="@context.Number"/>
        </FormItem>
    </ChildContent>
</Form>

@code
{
    public class Model1
    {
        [Required]
        public int Number { get; set; }
    }

    public class Model2
    {
        [Required]
        public int Number { get; set; }
    }

    private Model1 model1 = new Model1();

    private Model2 model2 = new Model2();

    private RenderFragment validator = @<CustomValidator/>;
}
