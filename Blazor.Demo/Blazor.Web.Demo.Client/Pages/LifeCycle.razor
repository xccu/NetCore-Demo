@page "/lifecycle"
@* @rendermode RenderMode.InteractiveWebAssembly *@

@attribute [RenderModeInteractiveServer(prerender: true)]
@using Services;
@inject FooService FooService

<PageTitle>Life Cycle</PageTitle>

<h3>Life Cycle</h3>

<p><a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-8.0">MS Document</a></p>

<p>@FooService.GetInfo()</p>

<p role="status">Current count: @currentCount</p>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;

    private void IncrementCount() => currentCount++;
    

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Console.WriteLine("SetParametersAsync - Begin");
        await base.SetParametersAsync(parameters);
        Console.WriteLine("SetParametersAsync - End");
    }

    protected override void OnInitialized() => Console.WriteLine("OnInitialized");

    protected override async Task OnInitializedAsync() => Console.WriteLine("OnInitializedAsync");

    protected override void OnParametersSet() => Console.WriteLine("OnParametersSet");

    protected override async Task OnParametersSetAsync() => Console.WriteLine("OnParametersSetAsync");

    protected override void OnAfterRender(bool firstRender) => Console.WriteLine($"OnAfterRender (First render: {firstRender})");

    protected override async Task OnAfterRenderAsync(bool firstRender) => Console.WriteLine($"OnAfterRenderAsync (First render: {firstRender})");


}