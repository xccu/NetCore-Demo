@page "/prerendered-counter-webassembly"
@using Services;

@* @rendermode RenderMode.InteractiveWebAssembly *@
@rendermode CustomerRenderMode.InteractiveWebAssemblyWithoutPrerender
@implements IDisposable
@inject ILogger<PrerenderedWebAssembly> Logger
@inject PersistentComponentState ApplicationState
@inject FooService FooService

<PageTitle>Prerendered WebAssembly</PageTitle>

<h3>Prerendered WebAssembly</h3>
<p>@FooService.GetInfo()</p>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {

    
    private int currentCount;
    private Random r = new Random();
    private PersistingComponentStateSubscription persistingSubscription;
    protected override void OnInitialized()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<int>("count", out var restoredCount))
        {
            currentCount = r.Next(100);
            Logger.LogInformation("currentCount set to {Count}", currentCount);
        }
        else
        {
            currentCount = restoredCount!;
            Logger.LogInformation("currentCount restored to {Count}", currentCount);
        }
        Logger.LogInformation("Foo is {0}", FooService.GetInfo());
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson("count", currentCount);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }

    private void IncrementCount()
    {
        currentCount = FooService.AddOne(currentCount);
        Logger.LogInformation("IncrementCount Clicked:{0}", currentCount);
    }
}