@page "/prerendered-auto"
@using Services;

@rendermode RenderMode.InteractiveAuto
@* @rendermode CustomerRenderMode.InteractiveAutoWithoutPrerender *@
@implements IDisposable
@inject ILogger<PrerenderedAuto> Logger
@inject PersistentComponentState ApplicationState
@inject FooService FooService

<PageTitle>Prerendered Auto</PageTitle>

<h3>Prerendered Auto</h3>
<p>@FooService.GetInfo()</p>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount;
    private Random r = new Random();
    private PersistingComponentStateSubscription persistingSubscription;

    protected override void OnInitialized()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistCount);

        if (!ApplicationState.TryTakeFromJson<int>("count", out var restoredCount))
        {
            currentCount = r.Next(100);
            Console.WriteLine($"[{DateTime.Now}] currentCount restored to {currentCount}");
        }
        else
        {
            currentCount = restoredCount!;
            Console.WriteLine($"[{DateTime.Now}] currentCount restored to {currentCount}");
        }
        Console.WriteLine($"[{DateTime.Now}] Foo is {FooService.GetInfo()}");
    }

    private Task PersistCount()
    {
        ApplicationState.PersistAsJson("count", currentCount);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }

    private void IncrementCount()
    {
        currentCount = FooService.AddOne(currentCount);
        Console.WriteLine($"[{DateTime.Now}] IncrementCount Clicked:{currentCount}");
    }
}