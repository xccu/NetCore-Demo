@page "/dispatch-exception"
@rendermode RenderMode.InteractiveServer
@using Services;
@inject FooService FooService

<PageTitle>Dispatch Exception</PageTitle>

<h3>Dispatch Exception</h3>

<p></p>

<p>@FooService.GetInfo()</p>

<button class="btn btn-primary" @onclick="ThrowEx">Throw</button>
<button class="btn btn-primary" @onclick="ThrowExAsync">ThrowAsync</button>

@code {
    private int currentCount = 0;

    
    private void ThrowEx()
    {
        //sync method invoke async method, exceptions will outside of life cycle and can't be catched
        _ = FooService.ThrowAsync();

        //_ = ThrowExceptionAsync();
    }

    public async Task ThrowExAsync()
    {
        try
        {
            await ThrowExceptionAsync();
        }
        catch (Exception ex)
        {
            //Handle caught exceptions outside of a Razor component's lifecycle
            await DispatchExceptionAsync(ex);
        }
    }

    private async Task ThrowExceptionAsync()
    {
        try
        {
            await FooService.ThrowAsync();
        }
        catch (Exception ex)
        {
            await DispatchExceptionAsync(ex);
        }
    }
}