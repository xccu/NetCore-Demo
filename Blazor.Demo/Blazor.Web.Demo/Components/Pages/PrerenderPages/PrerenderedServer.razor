@page "/prerendered-counter-server"
@attribute [RenderModeInteractiveServer(prerender: true)]
@implements IDisposable
@inject ILogger<PrerenderedServer> Logger
@inject PersistentComponentState ApplicationState
@using Services;
@inject FooService FooService

<PageTitle>Prerendered Server</PageTitle>

<h3>Prerendered Server</h3>
<p>@FooService.GetInfo()</p>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount;
    private Random r = new Random();
    private PersistingComponentStateSubscription persistingSubscription;

    protected override void OnInitialized()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistCount);

        if (!ApplicationState.TryTakeFromJson<int>("count", out var restoredCount))
        {
            currentCount = r.Next(100);
            Logger.LogInformation("currentCount set to {Count}", currentCount);
        }
        else
        {
            currentCount = restoredCount!;
            Logger.LogInformation("currentCount restored to {Count}", currentCount);
        }
        Logger.LogInformation("Foo is {0}", FooService.GetInfo());
    }

    private Task PersistCount()
    {
        ApplicationState.PersistAsJson("count", currentCount);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }

    private void IncrementCount()
    {
        currentCount = FooService.AddOne(currentCount);
        Logger.LogInformation("IncrementCount Clicked:{0}", currentCount);
    }
}